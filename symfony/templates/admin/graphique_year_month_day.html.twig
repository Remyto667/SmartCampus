{% extends 'basewithnavbar.html.twig' %}

{% block body %}

    <style>
        body{
            background-color: #f7f9fa;
        }

        .container { text-align: center; }

        h1{
            font-family: sans-serif;
            font-size: 40px;
            margin: 40px;
        }

        .btGraph
        {
            display: flex;
            justify-content: center;
            margin: 40px 10px;
        }

        .btn {
            color: #fff;
            background-color: #00489a;
            border-color: #00489a;
        }

        .marginbtn{
            margin-left: 15px;
        }

        .line{
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            column-gap: 30px;
            padding-top: 100px;
        }

        .item-line{
            align-self: auto;
        }

    </style>
    <div class="container">

        <div class="graph" id="canvasWrapper" style=" ">

            <h1>{{ room.getName() }}</h1>
            <h2>Données du {{day }} le mois {{mois_choisi}} de l'année {{annee_choisi}}</h2>

            <div class="d-flex justify-content-evenly">
                <div>
                    <a href="/admin/suivi/graphique/{{ room.id }}/{{annee_choisi }}/{{mois_choisi}}/{{day - 1}}" class="list-group-item list-group-item-action py-2 ripple">
                        <img class="rounded mx-auto d-block img" src="{{ asset('img/arrow_left.png') }}">
                    </a>
                </div>

                <div>
                    <canvas id="ChartHum" width="1500" height="250"></canvas>
                    <canvas id="ChartCo2" width="1500" height="250"></canvas>
                    <canvas id="ChartTemp" width="1500" height="250"></canvas>
                </div>
                <div>
                    <a href="/admin/suivi/graphique/{{ room.id }}/{{annee_choisi }}/{{mois_choisi }}/{{day + 1}}" class="list-group-item list-group-item-action py-2 ripple">
                        <img class="rounded mx-auto d-block img" src="{{ asset('img/arrow_right.png') }}">
                    </a>
                </div>
            </div>

            <div class="btGraph">

                <div class="btn-group">
                    <a class="btn btn-primary blue marginbtn" onclick="showChartData('annee')">Année</a>

                    <button type="button" class="btn btn-danger dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    </button>
                    <div class="dropdown-menu">
                        {% for i in 0..4 %}
                            <a class="dropdown-item" href="/admin/suivi/graphique/{{ room.getId() }}/{{ year -i }}">{{ year -i }}</a>
                        {% endfor %}

                    </div>
                </div>

                <div class="btn-group">
                    <a class="btn btn-primary blue marginbtn" onclick="showChartData('mois')">Mois</a>

                    <button type="button" class="btn btn-danger dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    </button>
                    <div class="dropdown-menu">
                        {% for i in 1..12 %}
                            <a class="dropdown-item" href="/admin/suivi/graphique/{{ room.getId() }}/{{ annee_choisi }}/{{ i }}">{{ i }}</a>
                        {% endfor %}
                    </div>
                </div>


                <div class="btn-group">
                <a class="btn btn-primary blue marginbtn" onclick="showChartData('jour')">Jour</a>
                    <button type="button" class="btn btn-danger dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    </button>
                    <div class="dropdown-menu">

                        {% if mois_choisi == mois %}

                            {% for i in 1..nb_jours-nb_jours_valide %}
                                <a class="dropdown-item" href="/admin/suivi/graphique/{{ room.getId() }}/{{ annee_choisi }}/{{ mois_choisi }}/{{ i }}">{{  i }}</a>
                            {% endfor %}

                        {% else %}

                            {% for i in 1..nb_jours %}
                                <a class="dropdown-item" href="/admin/suivi/graphique/{{ room.getId() }}/{{ annee_choisi }}/{{ mois_choisi }}/{{ i }}">{{  i }}</a>
                            {% endfor %}

                        {% endif %}

                    </div>
                </div>

                <a class="btn btn-primary blue marginbtn" onclick="showSeuilMax()">Seuil Max</a>

                <a class="btn btn-primary blue marginbtn" onclick="showSeuilMin()">Seuil Min</a>


            </div>
        </div>
        <div class="line">
            <!-- Access to data from other rooms quickly, for each floor -->
            {% for floor in allFloor %}
                <div class="item-line">
                    {% if floor=="0" %}
                        <p style="margin-top: 20px;"> Rez-de-chaussée : </p>
                    {% else %}
                        <p style="margin-top: 20px;"> Etage {{ floor }} : </p>
                    {% endif %}
                    {% for room in allRoom %}
                        {% if (room.isIsStock() != 1) and (room.floor == floor) %}
                            {% if (room.isAlert == true ) %}
                                <a class="btn red btn-danger" href="/admin/suivi/graphique/{{ room.id }}/{{annee_choisi}}/{{mois_choisi}}/{{day }}" role="button">{{ room.name }}</a>
                            {% else %}
                                <a class="btn blue btn-primary" href="/admin/suivi/graphique/{{ room.id }}/{{annee_choisi}}/{{mois_choisi}}/{{day }}" role="button">{{ room.name }}</a>
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                </div>
            {% endfor %}
        </div>
    </div>





    <!-- Script pour créer le graphique -->
    <script>
        // Initialisation des données

        var inputTemp = [{{ dataDayTemp |join(', ') | raw }}]

        var dataDayTempx = inputTemp.map(function(item) {
            return item.x});

        var dataDayTempy = inputTemp.map(function(item) {
            return item.y});

        var inputHum = [{{ dataDayHum |join(', ')  | raw }}]

        var dataDayHumx = inputHum.map(function(item) {
            return item.x});

        var dataDayHumy = inputHum.map(function(item) {
            return item.y});

        var inputCo2= [{{ dataDayCo2 |join(', ')  | raw }}]

        var dataDayCo2x = inputCo2.map(function(item) {
            return item.x});

        var dataDayCo2y = inputCo2.map(function(item) {
            return item.y});

        var labelsYear = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet','Aout','Septembre','Novembre','Octobre','Decembre'];
        var labelsMonth = [];
        const dataSeuil = [];
        const labelSeuil = "Seuil ";
        let seuilMin = true;
        let seuilMax = true;

        let monthcliked =false;
        let yearclicked =false;
        let dayclicked = false;

        for(let i=1; i<= {{ nb_jours }};i++){

            labelsMonth.push(i.toString());
        }

        // Récupération du canvas
        var ctxTemp = document.getElementById('ChartTemp').getContext('2d');

        // Données du graphique
        var dataTemp = {
            labels: dataDayTempx ,
            datasets: [{
                label: 'Temperature du '+ {{day }} + ' le mois ' + {{mois_choisi}} + ' de l\'année ' + {{annee_choisi}},
                data: dataDayTempy,
                backgroundColor: [
                    'rgba(229, 13, 236, 0.1)',
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',

                ],
                borderWidth: 1
            },
                {
                    label: labelSeuil,
                    data: dataSeuil,
                    fill:false,
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                    ],
                    borderWidth: 1,
                    pointRadius :0
                },
                {
                    label: labelSeuil,
                    data: dataSeuil,
                    fill:true,
                    borderColor: [
                        'rgb(75, 192, 192)',
                    ],
                    borderWidth: 1,
                    pointRadius :0
                }]
        };

        // Options du graphique
        var optionsTemp = {
            scales: {
                y: {
                    suggestedMax:40,
                    ticks: {
                        beginAtZero: true,
                        font:{
                            size:18
                        }
                    }
                },

                x: {
                    ticks:{
                        font:{
                            size:18
                        }
                    },
                    type: 'time',
                }
            }
        };

        // -------------------------------- Chart Humidite ---------------------------- //



        // Récupération du canvas
        var ctxHum = document.getElementById('ChartHum').getContext('2d');

        // Données du graphique
        var dataHum = {
            labels: dataDayHumx,
            datasets: [{
                label: 'Humidité du '+ {{day }} + ' le mois ' + {{mois_choisi}} + ' de l\'année ' + {{annee_choisi}},
                data: dataDayHumy,
                backgroundColor: [
                    'rgba(229, 13, 236, 0.1)',
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                ],
                borderWidth: 1
            },
                {
                    label:labelSeuil,
                    data: dataSeuil,
                    fill:false,
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                    ],
                    borderWidth: 1,
                    pointRadius :0
                },
                {
                    label: labelSeuil,
                    data: dataSeuil,
                    fill:true,
                    borderColor: [
                        'rgb(75, 192, 192)',
                    ],
                    borderWidth: 1,
                    pointRadius :0
                }]
        };

        // Options du graphique
        var optionsHum = {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        };

        // -------------------------------- Chart Co2 ---------------------------- //

        // Récupération du canvas
        var ctxCo2 = document.getElementById('ChartCo2').getContext('2d');

        // Données du graphique
        var dataCo2 = {
            labels: dataDayCo2x,
            datasets: [{
                label: 'Co2 du '+ {{day }} + ' le mois ' + {{mois_choisi}} + ' de l\'année ' + {{annee_choisi}},
                data: dataDayCo2y,
                backgroundColor: [
                    'rgba(229, 13, 236, 0.1)',
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                ],
                borderWidth: 1,
            },
                {
                    label:labelSeuil,
                    data: dataSeuil,
                    fill:false,
                    borderColor : [
                        'rgba(255, 99, 132, 1)',
                    ],
                    borderWidth: 1,
                    pointRadius :0
                },
                {
                    label: labelSeuil,
                    data: dataSeuil,
                    fill:true,
                    borderColor: [
                        'rgb(75, 192, 192)',
                    ],
                    borderWidth: 1,
                    pointRadius :0
                }]
        };

        // Options du graphique
        var optionsCo2 = {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]

            }
        };

        // Création du graphique

        var myChartCo2 = new Chart(ctxCo2, {
            type: 'line',
            data: dataCo2,
            options: optionsCo2
        });

        var myChartHum = new Chart(ctxTemp, {
            type: 'line',
            data: dataHum,
            options: optionsHum
        });

        var myChartTemp = new Chart(ctxHum, {
            type: 'line',
            data: dataTemp,
            options: optionsTemp
        });

        function chartUpdate(index,dataTemp,dataHum,dataCo2,labels,stringLabelTemp,stringLabelHum,stringLabelCo2){

            myChartTemp.data.datasets[index].data = dataTemp;
            myChartTemp.data.labels = labels;
            myChartTemp.data.datasets[index].label = stringLabelTemp
            myChartTemp.update();

            myChartHum.data.datasets[index].data = dataHum;
            myChartHum.data.labels = labels;
            myChartHum.data.datasets[index].label = stringLabelHum
            myChartHum.update();

            myChartCo2.data.datasets[index].data = dataCo2;
            myChartCo2.data.labels = labels;
            myChartCo2.data.datasets[index].label = stringLabelCo2
            myChartCo2.update();
        }

        function showChartData(type){


            const anneeLabels=labelsYear;
            const moisLabels=labelsMonth;

            const jourTemp = dataDayTempy;
            const jourHum = dataDayHumy;
            const jourCo2 = dataDayCo2y;
            const anneeTemp = {{moyYearTemp}};
            const anneeHum = {{ moyYearHum }};
            const anneeCo2 = {{ moyYearCo2 }};

            const moisTemp = {{ moyMonthTemp }};
            const moisHum = {{ moyMonthHum }};
            const moisCo2 = {{ moyMonthCo2 }};


            if(type === 'jour') {
                myChartTemp.data.datasets[0].data = jourTemp;
                myChartTemp.data.labels = dataDayTempx;
                myChartTemp.data.datasets[0].label = 'Temperature du '+ {{day }} + ' le mois ' + {{mois_choisi}} + ' de l\'année ' + {{annee_choisi}}
                myChartTemp.update();

                myChartHum.data.datasets[0].data = jourHum;
                myChartHum.data.labels = dataDayHumx;
                myChartHum.data.datasets[0].label = 'Humidité du '+ {{day }} + ' le mois ' + {{mois_choisi}} + ' de l\'année ' + {{annee_choisi}}
                myChartHum.update();

                myChartCo2.data.datasets[0].data = jourCo2;
                myChartCo2.data.labels = dataDayCo2x;
                myChartCo2.data.datasets[0].label = 'Co2 du '+ {{day }} + ' le mois ' + {{mois_choisi}} + ' de l\'année ' + {{annee_choisi}}
                myChartCo2.update();

                yearclicked=false;
                monthcliked=false;
                dayclicked=true;
            }

            if(type === 'annee') {

                chartUpdate(0,anneeTemp,anneeHum,anneeCo2,anneeLabels,'Temperature de l\'année ' + {{ annee_choisi}},'Humidite de l\'année ' + {{ annee_choisi}},'Co2 de l\'année ' + {{ annee_choisi}});
                yearclicked=true;
                monthcliked=false;
                dayclicked=false;
            }

            if(type === 'mois'){

                chartUpdate(0,moisTemp,moisHum,moisCo2,moisLabels,'Temperature du mois ' + {{mois_choisi}} + ' de l\'année ' + {{annee_choisi}},'Humidite du mois ' + {{mois_choisi}} + ' de l\'année ' + {{annee_choisi}},'Co2 du mois ' + {{mois_choisi}} + ' de l\'année ' + {{annee_choisi}});
                monthcliked=true;
                yearclicked=false;
                dayclicked=false;
            }

        }

        function showSeuilMax(){

            var seuilTemp = [];
            var seuilHum = [];
            var seuilCo2 = [];

            for(let i=1;i< dataDayCo2x.length+1;i++){

                seuilTemp.push({{ tempMax }});
                seuilHum.push({{ humMax }});
                seuilCo2.push({{ co2Max }});
            }

            if(seuilMax && monthcliked && yearclicked===false && dayclicked===false){

                chartUpdate(1,seuilTemp,seuilHum,seuilCo2,labelsMonth,'Seuil de Température maximum {{ tempMax }}°C','Seuil d\'Humidité maximum {{ humMax }}%','Seuil de Co2 maximum{{ co2Max }} ppm');
                seuilMax=false;

            }

            else if (seuilMax===false && monthcliked){

                chartUpdate(1,dataSeuil,dataSeuil,dataSeuil,labelsMonth,labelSeuil,labelSeuil,labelSeuil);
                seuilMax=true;
                //monthcliked=false;

            }

            if(seuilMax && yearclicked && monthcliked===false && dayclicked===false) {
                chartUpdate(1,seuilTemp,seuilHum,seuilCo2,labelsYear,'Seuil de Température maximum {{ tempMax }}°C','Seuil d\'Humidité maximum {{ humMax }}%','Seuil de Co2 maximum{{ co2Max }} ppm');
                seuilMax=false;
            }

            else if(seuilMax===false && yearclicked){
                chartUpdate(1,dataSeuil,dataSeuil,dataSeuil,labelsYear,labelSeuil,labelSeuil,labelSeuil);
                seuilMax=true;
                //yearclicked=false;
            }

            if(seuilMax && dayclicked && monthcliked===false && yearclicked===false) {
                chartUpdate(1,seuilTemp,seuilHum,seuilCo2,dataDayCo2x,'Seuil de Température maximum {{ tempMax }}°C','Seuil d\'Humidité maximum {{ humMax }}%','Seuil de Co2 maximum{{ co2Max }} ppm')
                seuilMax=false;
            }

            else if(seuilMax===false && dayclicked){
                chartUpdate(1,dataSeuil,dataSeuil,dataSeuil,dataDayCo2x,labelSeuil,labelSeuil,labelSeuil);
                seuilMax=true;
            }
        }


        function showSeuilMin(){

            var seuilTemp = [];
            var seuilHum = [];
            var seuilCo2 = [];

            for(let i=1;i< dataDayCo2x.length+1;i++){

                seuilTemp.push({{ tempMin }});
                seuilHum.push({{ humMin }});
                seuilCo2.push({{ co2Min }});
            }

            if(seuilMin && monthcliked && yearclicked===false && dayclicked===false){

                chartUpdate(2,seuilTemp,seuilHum,seuilCo2,labelsMonth,'Seuil de Température maximum {{ tempMax }}°C','Seuil d\'Humidité maximum {{ humMax }}%','Seuil de Co2 maximum{{ co2Max }} ppm');
                seuilMin=false;

            }

            else if (seuilMin===false && monthcliked){

                chartUpdate(2,dataSeuil,dataSeuil,dataSeuil,labelsMonth,labelSeuil,labelSeuil,labelSeuil);
                seuilMin=true;
                //monthcliked=false;

            }

            if(seuilMin && yearclicked && monthcliked===false && dayclicked===false) {
                chartUpdate(2,seuilTemp,seuilHum,seuilCo2,labelsYear,'Seuil de Température maximum {{ tempMax }}°C','Seuil d\'Humidité maximum {{ humMax }}%','Seuil de Co2 maximum{{ co2Max }} ppm');
                seuilMin=false;
            }

            else if(seuilMin===false && yearclicked){
                chartUpdate(2,dataSeuil,dataSeuil,dataSeuil,labelsYear,labelSeuil,labelSeuil,labelSeuil);
                seuilMin=true;
                //yearclicked=false;
            }

            if(seuilMin && dayclicked && monthcliked===false && yearclicked===false) {
                chartUpdate(2,seuilTemp,seuilHum,seuilCo2,dataDayCo2x,'Seuil de Température maximum {{ tempMax }}°C','Seuil d\'Humidité maximum {{ humMax }}%','Seuil de Co2 maximum{{ co2Max }} ppm')
                seuilMin=false;
            }

            else if(seuilMin===false && dayclicked){
                chartUpdate(2,dataSeuil,dataSeuil,dataSeuil,dataDayCo2x,labelSeuil,labelSeuil,labelSeuil);
                seuilMin=true;
            }
        }

    </script>


{% endblock %}

